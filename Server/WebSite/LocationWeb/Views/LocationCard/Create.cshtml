@model DbModel.Location.AreaAndDev.LocationCard

@{
    ViewBag.Title = "Create";
}

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h2 class="modal-title" id="myModalLabel">Create</h2>
</div>

<div class="modal-body">
    @using (@Ajax.BeginForm(new AjaxOptions() { HttpMethod = "Post", OnSuccess = "creatSuccess(data)" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Tag</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Describe, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Describe, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Describe, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CardRoleId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CardRoleId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CardRoleId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Power, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Power, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Power, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PowerState, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PowerState, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PowerState, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Flag, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Flag, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Flag, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>

        <div>
            @Html.ActionLink("返 回", "Index")
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<link href="~/Content/toastr.css" rel="stylesheet" />
<script src="~/Scripts/toastr.js"></script>

<script src="~/Scripts/createmodal.js"></script>

@*<script type="text/javascript">
        function creatSuccess(result) {
            if (result.success) {
                //页面加载的时间
                //var msgTime = 2000;

                //参数设置，若用默认值可以省略以下面代
                toastr.options = {
                    closeButton: false, //是否显示关闭按钮
                    debug: false, //是否使用debug模式
                    positionClass: "toast-top-full-width",//弹出窗的位置
                    showDuration: "300",//显示的动画时间
                    hideDuration: "1000",//消失的动画时间
                    timeOut: "2000", //展现时间
                    extendedTimeOut: "1000",//加长展示时间
                    showEasing: "swing",//显示时的动画缓冲方式
                    hideEasing: "linear",//消失时的动画缓冲方式
                    showMethod: "fadeIn",//显示时的动画方式
                    hideMethod: "fadeOut" //消失时的动画方式
                };

                //var msgTime=toastr.options.showDuration+toastr.options.hideDuration+toastr.options.timeOut;

                toastr.success("创建成功！");
                $('#myModal').modal('hide');

                //局部刷新页面
                $(function () {
                    $("#freshTable").load(location.href + " #freshTable");//注意后面ID前面的空格，很重要！（也可以使用类名）
                })
               
                //延时加载页面
                //setTimeout(function () {
                //    location.reload();
                //}, 1000);

                //location.reload();

            } else {
                $.each(result.errors, function (key, val) {
                    var container = $('span[data-valmsg-for="' + key + '"]');
                    container.removeClass("field-validation-valid").addClass("field-validation-error");
                    container.html(val[val.length - 1].ErrorMessage);
                });
            }
        }

        $(function () {
            //allow validation framework to parse DOM
            $.validator.unobtrusive.parse('form');
        });
</script>*@

